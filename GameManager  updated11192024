import java.util.*;

public class GameManager {
    private Player player;
    private boolean isGameRunning;
    private boolean ritualPerformed;
    private boolean entityDefeated;
    private boolean ruinsInvestigated;
    private Creature helio;
    private Creature mylo;
    private Map<String, Location> locations;
    private Location currentLocation;

    public GameManager() {
        player = new Player("Queen Elara", 100);
        isGameRunning = true;
        ritualPerformed = false;
        entityDefeated = false;
        ruinsInvestigated = false;

        initializeLocations();

        // Initialize Helio with interaction phrases
        helio = new Creature("Helio Umetris", "A wise adviser skilled in elemental magic.",
                new String[] {
                    "Stay vigilant; the ruins are full of hidden dangers.",
                    "Use your strength wisely, Elara. It will guide us to victory.",
                    "The entity is restless; we must act soon."
                });

        // Initialize Mylo with interaction phrases
        mylo = new Creature("Mylo Yasujiro", "A visiting dignitary with vast knowledge of the world.",
                new String[] {
                    "These ruins are treacherous, but their mysteries call to us. Stay vigilant—one wrong step and we'll be just another story lost to the sands.",
                    "I've seen places like this before. Stay alert.",
                    "If we make it through this, stories of this day will be legendary."
                });
    }

    private void initializeLocations() {
        locations = new HashMap<>();

        // Define locations
        Location royalPalace = new Location(
            "Royal Palace",
            "The center of the kingdom, where political decisions are made. It serves as Elara's headquarters for planning and gathering information."
        );

        Location oasisOfIsolde = new Location(
            "Oasis of Isolde",
            "Named after Queen Elara’s mother, this magnificent oasis is a sanctuary of life amidst the arid desert. Palm trees sway gently around crystal-clear waters, and exotic flora and fauna thrive in this verdant haven. It is said that the waters of Isolde have healing properties, blessed by the kingdom’s ancient deities."
        );

        Location eternalDunes = new Location(
            "Eternal Dunes",
            "The vast deserts of Aridia are both beautiful and deadly. These endless dunes shift with the winds, creating an ever-changing landscape that can easily disorient even the most seasoned traveler. Hidden within the sands are ancient ruins and lost treasures, remnants of civilizations long past."
        );

        Location desertRuins = new Location(
            "Undiscovered Desert Ruins",
            "Hidden throughout the desert, these ruins contain artifacts and knowledge that may reveal secrets about the ancient entity."
        );

        // Add locations to the map
        locations.put("royal palace", royalPalace);
        locations.put("oasis of isolde", oasisOfIsolde);
        locations.put("eternal dunes", eternalDunes);
        locations.put("desert ruins", desertRuins);

        // Set initial location
        currentLocation = royalPalace;
    }

    public void startGame() {
        try (Scanner scanner = new Scanner(System.in)) {
            System.out.println("Welcome to Desert Kings and Secrets!");
            currentLocation.enterLocation(); // Show the initial location description
            showMenu();

            while (isGameRunning) {
                System.out.print("Enter command: ");
                String command = scanner.nextLine();
                processCommand(command, scanner);
            }
        }
    }

    private void showMenu() {
        System.out.println("\nAvailable Commands:");
        System.out.println("- travel: Move to a different location.");
        if (!ruinsInvestigated) {
            System.out.println("- investigate ruins: Search the ancient ruins for clues and items.");
        }
        if (!ritualPerformed) {
            System.out.println("- perform ritual: Begin a powerful ritual to prepare for the battle.");
        }
        if (ruinsInvestigated && ritualPerformed) {
            System.out.println("- attack ancient entity: Attempt to defeat the ancient entity.");
        }
        System.out.println("- consult with helio: Seek advice from Helio.");
        System.out.println("- consult with mylo: Seek Mylo's perspective.");
        System.out.println("- menu or help: Show this list of commands.");
        System.out.println("- quit: Exit the game.\n");
    }

    private void processCommand(String command, Scanner scanner) {
        switch (command.toLowerCase()) {
            case "travel":
                System.out.println("Where would you like to travel?");
                System.out.println("Available locations: " + locations.keySet());
                String destination = scanner.nextLine().toLowerCase();
                if (locations.containsKey(destination)) {
                    currentLocation = locations.get(destination);
                    currentLocation.enterLocation(); // Display details of the new location
                } else {
                    System.out.println("Unknown location. Please choose a valid destination.");
                }
                break;
            // Add other commands as needed (e.g., rest, investigate ruins, etc.)
            case "quit":
                isGameRunning = false;
                System.out.println("Thank you for playing!");
                break;
            default:
                System.out.println("Unknown command.");
        }
    }
}
